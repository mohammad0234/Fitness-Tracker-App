// Mocks generated by Mockito 5.4.5 from annotations
// in fitjourney/test/services/workout_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:firebase_auth/firebase_auth.dart' as _i5;
import 'package:firebase_auth_platform_interface/firebase_auth_platform_interface.dart'
    as _i4;
import 'package:firebase_core/firebase_core.dart' as _i3;
import 'package:fitjourney/database/database_helper.dart' as _i7;
import 'package:fitjourney/database_models/daily_log.dart' as _i15;
import 'package:fitjourney/database_models/exercise.dart' as _i11;
import 'package:fitjourney/database_models/goal.dart' as _i14;
import 'package:fitjourney/database_models/streak.dart' as _i6;
import 'package:fitjourney/database_models/user.dart' as _i9;
import 'package:fitjourney/database_models/workout.dart' as _i10;
import 'package:fitjourney/database_models/workout_exercise.dart' as _i12;
import 'package:fitjourney/database_models/workout_set.dart' as _i13;
import 'package:fitjourney/services/notification_trigger_service.dart' as _i17;
import 'package:fitjourney/services/streak_service.dart' as _i18;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i16;
import 'package:sqflite/sqflite.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeFirebaseApp_1 extends _i1.SmartFake implements _i3.FirebaseApp {
  _FakeFirebaseApp_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeActionCodeInfo_2 extends _i1.SmartFake
    implements _i4.ActionCodeInfo {
  _FakeActionCodeInfo_2(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeUserCredential_3 extends _i1.SmartFake
    implements _i5.UserCredential {
  _FakeUserCredential_3(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeConfirmationResult_4 extends _i1.SmartFake
    implements _i5.ConfirmationResult {
  _FakeConfirmationResult_4(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeStreak_5 extends _i1.SmartFake implements _i6.Streak {
  _FakeStreak_5(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i7.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i2.Database> get database =>
      (super.noSuchMethod(
            Invocation.getter(#database),
            returnValue: _i8.Future<_i2.Database>.value(
              _FakeDatabase_0(this, Invocation.getter(#database)),
            ),
          )
          as _i8.Future<_i2.Database>);

  @override
  _i8.Future<void> markForSync(
    String? tableName,
    String? recordId,
    String? operation,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#markForSync, [tableName, recordId, operation]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> insertUser(_i9.AppUser? user) =>
      (super.noSuchMethod(
            Invocation.method(#insertUser, [user]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i9.AppUser?> getUserById(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getUserById, [userId]),
            returnValue: _i8.Future<_i9.AppUser?>.value(),
          )
          as _i8.Future<_i9.AppUser?>);

  @override
  _i8.Future<void> updateUserLastLogin(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserLastLogin, [userId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> insertWorkout(_i10.Workout? workout) =>
      (super.noSuchMethod(
            Invocation.method(#insertWorkout, [workout]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<_i10.Workout?> getWorkoutById(int? workoutId) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkoutById, [workoutId]),
            returnValue: _i8.Future<_i10.Workout?>.value(),
          )
          as _i8.Future<_i10.Workout?>);

  @override
  _i8.Future<List<_i10.Workout>> getWorkoutsForUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getWorkoutsForUser, [userId]),
            returnValue: _i8.Future<List<_i10.Workout>>.value(<_i10.Workout>[]),
          )
          as _i8.Future<List<_i10.Workout>>);

  @override
  _i8.Future<void> updateWorkout(_i10.Workout? workout) =>
      (super.noSuchMethod(
            Invocation.method(#updateWorkout, [workout]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> deleteWorkout(int? workoutId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWorkout, [workoutId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> insertExercise(_i11.Exercise? exercise) =>
      (super.noSuchMethod(
            Invocation.method(#insertExercise, [exercise]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<List<_i11.Exercise>> getAllExercises() =>
      (super.noSuchMethod(
            Invocation.method(#getAllExercises, []),
            returnValue: _i8.Future<List<_i11.Exercise>>.value(
              <_i11.Exercise>[],
            ),
          )
          as _i8.Future<List<_i11.Exercise>>);

  @override
  _i8.Future<List<_i11.Exercise>> getExercisesByMuscleGroup(
    String? muscleGroup,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getExercisesByMuscleGroup, [muscleGroup]),
            returnValue: _i8.Future<List<_i11.Exercise>>.value(
              <_i11.Exercise>[],
            ),
          )
          as _i8.Future<List<_i11.Exercise>>);

  @override
  _i8.Future<_i11.Exercise?> getExerciseById(int? exerciseId) =>
      (super.noSuchMethod(
            Invocation.method(#getExerciseById, [exerciseId]),
            returnValue: _i8.Future<_i11.Exercise?>.value(),
          )
          as _i8.Future<_i11.Exercise?>);

  @override
  _i8.Future<int> insertWorkoutExercise(
    _i12.WorkoutExercise? workoutExercise,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#insertWorkoutExercise, [workoutExercise]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<List<Map<String, dynamic>>> getExercisesForWorkout(
    int? workoutId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getExercisesForWorkout, [workoutId]),
            returnValue: _i8.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i8.Future<List<Map<String, dynamic>>>);

  @override
  _i8.Future<int> insertWorkoutSet(_i13.WorkoutSet? workoutSet) =>
      (super.noSuchMethod(
            Invocation.method(#insertWorkoutSet, [workoutSet]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<List<_i13.WorkoutSet>> getSetsForWorkoutExercise(
    int? workoutExerciseId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getSetsForWorkoutExercise, [workoutExerciseId]),
            returnValue: _i8.Future<List<_i13.WorkoutSet>>.value(
              <_i13.WorkoutSet>[],
            ),
          )
          as _i8.Future<List<_i13.WorkoutSet>>);

  @override
  _i8.Future<void> updateWorkoutSet(_i13.WorkoutSet? workoutSet) =>
      (super.noSuchMethod(
            Invocation.method(#updateWorkoutSet, [workoutSet]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> deleteWorkoutSet(int? workoutSetId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteWorkoutSet, [workoutSetId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> saveCompleteWorkout({
    required String? userId,
    required DateTime? date,
    required int? duration,
    required String? notes,
    required List<Map<String, dynamic>>? exercises,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveCompleteWorkout, [], {
              #userId: userId,
              #date: date,
              #duration: duration,
              #notes: notes,
              #exercises: exercises,
            }),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<void> initializeExercisesIfNeeded() =>
      (super.noSuchMethod(
            Invocation.method(#initializeExercisesIfNeeded, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> insertGoal(_i14.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#insertGoal, [goal]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<_i14.Goal?> getGoalById(int? goalId) =>
      (super.noSuchMethod(
            Invocation.method(#getGoalById, [goalId]),
            returnValue: _i8.Future<_i14.Goal?>.value(),
          )
          as _i8.Future<_i14.Goal?>);

  @override
  _i8.Future<List<_i14.Goal>> getGoalsForUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getGoalsForUser, [userId]),
            returnValue: _i8.Future<List<_i14.Goal>>.value(<_i14.Goal>[]),
          )
          as _i8.Future<List<_i14.Goal>>);

  @override
  _i8.Future<List<_i14.Goal>> getActiveGoals(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getActiveGoals, [userId]),
            returnValue: _i8.Future<List<_i14.Goal>>.value(<_i14.Goal>[]),
          )
          as _i8.Future<List<_i14.Goal>>);

  @override
  _i8.Future<List<_i14.Goal>> getCompletedGoals(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getCompletedGoals, [userId]),
            returnValue: _i8.Future<List<_i14.Goal>>.value(<_i14.Goal>[]),
          )
          as _i8.Future<List<_i14.Goal>>);

  @override
  _i8.Future<void> updateGoalProgress(int? goalId, double? progress) =>
      (super.noSuchMethod(
            Invocation.method(#updateGoalProgress, [goalId, progress]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> markGoalAchieved(int? goalId) =>
      (super.noSuchMethod(
            Invocation.method(#markGoalAchieved, [goalId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> deleteGoal(int? goalId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteGoal, [goalId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> countWorkoutsInDateRange(
    String? userId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#countWorkoutsInDateRange, [
              userId,
              startDate,
              endDate,
            ]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<List<_i14.Goal>> getNearCompletionGoals(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getNearCompletionGoals, [userId]),
            returnValue: _i8.Future<List<_i14.Goal>>.value(<_i14.Goal>[]),
          )
          as _i8.Future<List<_i14.Goal>>);

  @override
  _i8.Future<List<_i14.Goal>> getExpiringGoals(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getExpiringGoals, [userId]),
            returnValue: _i8.Future<List<_i14.Goal>>.value(<_i14.Goal>[]),
          )
          as _i8.Future<List<_i14.Goal>>);

  @override
  _i8.Future<void> updateGoal(_i14.Goal? goal) =>
      (super.noSuchMethod(
            Invocation.method(#updateGoal, [goal]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> updateAllGoalStatuses(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#updateAllGoalStatuses, [userId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i6.Streak?> getStreakForUser(String? userId) =>
      (super.noSuchMethod(
            Invocation.method(#getStreakForUser, [userId]),
            returnValue: _i8.Future<_i6.Streak?>.value(),
          )
          as _i8.Future<_i6.Streak?>);

  @override
  _i8.Future<void> updateUserStreak(_i6.Streak? streak) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserStreak, [streak]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> logDailyActivity(_i15.DailyLog? log) =>
      (super.noSuchMethod(
            Invocation.method(#logDailyActivity, [log]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<List<_i15.DailyLog>> getDailyLogsForDateRange(
    String? userId,
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDailyLogsForDateRange, [
              userId,
              startDate,
              endDate,
            ]),
            returnValue: _i8.Future<List<_i15.DailyLog>>.value(
              <_i15.DailyLog>[],
            ),
          )
          as _i8.Future<List<_i15.DailyLog>>);

  @override
  _i8.Future<int> insertUserMetric(String? userId, double? weightKg) =>
      (super.noSuchMethod(
            Invocation.method(#insertUserMetric, [userId, weightKg]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);

  @override
  _i8.Future<void> updateUserMetric(int? metricId, double? weightKg) =>
      (super.noSuchMethod(
            Invocation.method(#updateUserMetric, [metricId, weightKg]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> deleteUserMetric(int? metricId) =>
      (super.noSuchMethod(
            Invocation.method(#deleteUserMetric, [metricId]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<int> insertUserWeight(
    String? userId,
    double? weight,
    DateTime? date,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#insertUserWeight, [userId, weight, date]),
            returnValue: _i8.Future<int>.value(0),
          )
          as _i8.Future<int>);
}

/// A class which mocks [FirebaseAuth].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseAuth extends _i1.Mock implements _i5.FirebaseAuth {
  MockFirebaseAuth() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.FirebaseApp get app =>
      (super.noSuchMethod(
            Invocation.getter(#app),
            returnValue: _FakeFirebaseApp_1(this, Invocation.getter(#app)),
          )
          as _i3.FirebaseApp);

  @override
  set app(_i3.FirebaseApp? _app) => super.noSuchMethod(
    Invocation.setter(#app, _app),
    returnValueForMissingStub: null,
  );

  @override
  set tenantId(String? tenantId) => super.noSuchMethod(
    Invocation.setter(#tenantId, tenantId),
    returnValueForMissingStub: null,
  );

  @override
  set customAuthDomain(String? customAuthDomain) => super.noSuchMethod(
    Invocation.setter(#customAuthDomain, customAuthDomain),
    returnValueForMissingStub: null,
  );

  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(
            Invocation.getter(#pluginConstants),
            returnValue: <dynamic, dynamic>{},
          )
          as Map<dynamic, dynamic>);

  @override
  _i8.Future<void> useAuthEmulator(
    String? host,
    int? port, {
    bool? automaticHostMapping = true,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #useAuthEmulator,
              [host, port],
              {#automaticHostMapping: automaticHostMapping},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> applyActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#applyActionCode, [code]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i4.ActionCodeInfo> checkActionCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#checkActionCode, [code]),
            returnValue: _i8.Future<_i4.ActionCodeInfo>.value(
              _FakeActionCodeInfo_2(
                this,
                Invocation.method(#checkActionCode, [code]),
              ),
            ),
          )
          as _i8.Future<_i4.ActionCodeInfo>);

  @override
  _i8.Future<void> confirmPasswordReset({
    required String? code,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#confirmPasswordReset, [], {
              #code: code,
              #newPassword: newPassword,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i5.UserCredential> createUserWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createUserWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#createUserWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<List<String>> fetchSignInMethodsForEmail(String? email) =>
      (super.noSuchMethod(
            Invocation.method(#fetchSignInMethodsForEmail, [email]),
            returnValue: _i8.Future<List<String>>.value(<String>[]),
          )
          as _i8.Future<List<String>>);

  @override
  _i8.Future<_i5.UserCredential> getRedirectResult() =>
      (super.noSuchMethod(
            Invocation.method(#getRedirectResult, []),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#getRedirectResult, []),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  bool isSignInWithEmailLink(String? emailLink) =>
      (super.noSuchMethod(
            Invocation.method(#isSignInWithEmailLink, [emailLink]),
            returnValue: false,
          )
          as bool);

  @override
  _i8.Stream<_i5.User?> authStateChanges() =>
      (super.noSuchMethod(
            Invocation.method(#authStateChanges, []),
            returnValue: _i8.Stream<_i5.User?>.empty(),
          )
          as _i8.Stream<_i5.User?>);

  @override
  _i8.Stream<_i5.User?> idTokenChanges() =>
      (super.noSuchMethod(
            Invocation.method(#idTokenChanges, []),
            returnValue: _i8.Stream<_i5.User?>.empty(),
          )
          as _i8.Stream<_i5.User?>);

  @override
  _i8.Stream<_i5.User?> userChanges() =>
      (super.noSuchMethod(
            Invocation.method(#userChanges, []),
            returnValue: _i8.Stream<_i5.User?>.empty(),
          )
          as _i8.Stream<_i5.User?>);

  @override
  _i8.Future<void> sendPasswordResetEmail({
    required String? email,
    _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendPasswordResetEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> sendSignInLinkToEmail({
    required String? email,
    required _i4.ActionCodeSettings? actionCodeSettings,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#sendSignInLinkToEmail, [], {
              #email: email,
              #actionCodeSettings: actionCodeSettings,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setLanguageCode(String? languageCode) =>
      (super.noSuchMethod(
            Invocation.method(#setLanguageCode, [languageCode]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setSettings({
    bool? appVerificationDisabledForTesting = false,
    String? userAccessGroup,
    String? phoneNumber,
    String? smsCode,
    bool? forceRecaptchaFlow,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#setSettings, [], {
              #appVerificationDisabledForTesting:
                  appVerificationDisabledForTesting,
              #userAccessGroup: userAccessGroup,
              #phoneNumber: phoneNumber,
              #smsCode: smsCode,
              #forceRecaptchaFlow: forceRecaptchaFlow,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> setPersistence(_i4.Persistence? persistence) =>
      (super.noSuchMethod(
            Invocation.method(#setPersistence, [persistence]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<_i5.UserCredential> signInAnonymously() =>
      (super.noSuchMethod(
            Invocation.method(#signInAnonymously, []),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#signInAnonymously, []),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithCredential(
    _i4.AuthCredential? credential,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCredential, [credential]),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#signInWithCredential, [credential]),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithCustomToken(String? token) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithCustomToken, [token]),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#signInWithCustomToken, [token]),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithEmailAndPassword({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailAndPassword, [], {
              #email: email,
              #password: password,
            }),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#signInWithEmailAndPassword, [], {
                  #email: email,
                  #password: password,
                }),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithEmailLink({
    required String? email,
    required String? emailLink,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithEmailLink, [], {
              #email: email,
              #emailLink: emailLink,
            }),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#signInWithEmailLink, [], {
                  #email: email,
                  #emailLink: emailLink,
                }),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.UserCredential> signInWithProvider(
    _i4.AuthProvider? provider,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithProvider, [provider]),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#signInWithProvider, [provider]),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<_i5.ConfirmationResult> signInWithPhoneNumber(
    String? phoneNumber, [
    _i5.RecaptchaVerifier? verifier,
  ]) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPhoneNumber, [phoneNumber, verifier]),
            returnValue: _i8.Future<_i5.ConfirmationResult>.value(
              _FakeConfirmationResult_4(
                this,
                Invocation.method(#signInWithPhoneNumber, [
                  phoneNumber,
                  verifier,
                ]),
              ),
            ),
          )
          as _i8.Future<_i5.ConfirmationResult>);

  @override
  _i8.Future<_i5.UserCredential> signInWithPopup(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithPopup, [provider]),
            returnValue: _i8.Future<_i5.UserCredential>.value(
              _FakeUserCredential_3(
                this,
                Invocation.method(#signInWithPopup, [provider]),
              ),
            ),
          )
          as _i8.Future<_i5.UserCredential>);

  @override
  _i8.Future<void> signInWithRedirect(_i4.AuthProvider? provider) =>
      (super.noSuchMethod(
            Invocation.method(#signInWithRedirect, [provider]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<String> verifyPasswordResetCode(String? code) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPasswordResetCode, [code]),
            returnValue: _i8.Future<String>.value(
              _i16.dummyValue<String>(
                this,
                Invocation.method(#verifyPasswordResetCode, [code]),
              ),
            ),
          )
          as _i8.Future<String>);

  @override
  _i8.Future<void> verifyPhoneNumber({
    String? phoneNumber,
    _i4.PhoneMultiFactorInfo? multiFactorInfo,
    required _i4.PhoneVerificationCompleted? verificationCompleted,
    required _i4.PhoneVerificationFailed? verificationFailed,
    required _i4.PhoneCodeSent? codeSent,
    required _i4.PhoneCodeAutoRetrievalTimeout? codeAutoRetrievalTimeout,
    String? autoRetrievedSmsCodeForTesting,
    Duration? timeout = const Duration(seconds: 30),
    int? forceResendingToken,
    _i4.MultiFactorSession? multiFactorSession,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#verifyPhoneNumber, [], {
              #phoneNumber: phoneNumber,
              #multiFactorInfo: multiFactorInfo,
              #verificationCompleted: verificationCompleted,
              #verificationFailed: verificationFailed,
              #codeSent: codeSent,
              #codeAutoRetrievalTimeout: codeAutoRetrievalTimeout,
              #autoRetrievedSmsCodeForTesting: autoRetrievedSmsCodeForTesting,
              #timeout: timeout,
              #forceResendingToken: forceResendingToken,
              #multiFactorSession: multiFactorSession,
            }),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> revokeTokenWithAuthorizationCode(
    String? authorizationCode,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#revokeTokenWithAuthorizationCode, [
              authorizationCode,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [NotificationTriggerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockNotificationTriggerService extends _i1.Mock
    implements _i17.NotificationTriggerService {
  MockNotificationTriggerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<void> onGoalAchieved(_i14.Goal? goal, {String? exerciseName}) =>
      (super.noSuchMethod(
            Invocation.method(
              #onGoalAchieved,
              [goal],
              {#exerciseName: exerciseName},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onGoalProgressUpdated(
    _i14.Goal? goal,
    double? previousProgress, {
    String? exerciseName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #onGoalProgressUpdated,
              [goal, previousProgress],
              {#exerciseName: exerciseName},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onGoalNearingExpiration(
    _i14.Goal? goal, {
    String? exerciseName,
  }) =>
      (super.noSuchMethod(
            Invocation.method(
              #onGoalNearingExpiration,
              [goal],
              {#exerciseName: exerciseName},
            ),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onStreakMilestone(int? streakDays) =>
      (super.noSuchMethod(
            Invocation.method(#onStreakMilestone, [streakDays]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onStreakMaintenanceRequired(int? currentStreak) =>
      (super.noSuchMethod(
            Invocation.method(#onStreakMaintenanceRequired, [currentStreak]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onStreakAtRisk(int? currentStreak) =>
      (super.noSuchMethod(
            Invocation.method(#onStreakAtRisk, [currentStreak]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onPersonalBest(int? exerciseId, double? weight) =>
      (super.noSuchMethod(
            Invocation.method(#onPersonalBest, [exerciseId, weight]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onWorkoutVolumeImprovement(
    String? muscleGroup,
    int? percentageImprovement,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onWorkoutVolumeImprovement, [
              muscleGroup,
              percentageImprovement,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> scheduleInactivityReminder(int? daysWithoutWorkout) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleInactivityReminder, [
              daysWithoutWorkout,
            ]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> scheduleWorkoutSuggestion(String? muscleGroup) =>
      (super.noSuchMethod(
            Invocation.method(#scheduleWorkoutSuggestion, [muscleGroup]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> scheduleDailyStreakCheck() =>
      (super.noSuchMethod(
            Invocation.method(#scheduleDailyStreakCheck, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onWeightMilestone(
    _i14.Goal? goal,
    double? weightChange,
    bool? isLoss,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onWeightMilestone, [goal, weightChange, isLoss]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> onWeightGoalPaceUpdate(
    _i14.Goal? goal,
    bool? onTrack,
    bool? isLoss,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#onWeightGoalPaceUpdate, [goal, onTrack, isLoss]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> scheduleWeightLogReminder() =>
      (super.noSuchMethod(
            Invocation.method(#scheduleWeightLogReminder, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}

/// A class which mocks [StreakService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStreakService extends _i1.Mock implements _i18.StreakService {
  MockStreakService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.Future<_i6.Streak> getUserStreak() =>
      (super.noSuchMethod(
            Invocation.method(#getUserStreak, []),
            returnValue: _i8.Future<_i6.Streak>.value(
              _FakeStreak_5(this, Invocation.method(#getUserStreak, [])),
            ),
          )
          as _i8.Future<_i6.Streak>);

  @override
  _i8.Future<void> logWorkout(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#logWorkout, [date]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> logRestDay(DateTime? date) =>
      (super.noSuchMethod(
            Invocation.method(#logRestDay, [date]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<void> performDailyStreakCheck() =>
      (super.noSuchMethod(
            Invocation.method(#performDailyStreakCheck, []),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);

  @override
  _i8.Future<List<_i15.DailyLog>> getDailyLogHistory(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getDailyLogHistory, [startDate, endDate]),
            returnValue: _i8.Future<List<_i15.DailyLog>>.value(
              <_i15.DailyLog>[],
            ),
          )
          as _i8.Future<List<_i15.DailyLog>>);

  @override
  _i8.Future<void> regenerateDailyLogs(
    DateTime? startDate,
    DateTime? endDate,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#regenerateDailyLogs, [startDate, endDate]),
            returnValue: _i8.Future<void>.value(),
            returnValueForMissingStub: _i8.Future<void>.value(),
          )
          as _i8.Future<void>);
}
